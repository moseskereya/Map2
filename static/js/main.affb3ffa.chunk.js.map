{"version":3,"sources":["Components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Map2","props","displayMarkers","state","stores","map","store","index","key","id","position","lat","latitude","lng","longitude","onClick","console","log","google","this","zoom","style","mapStyles","initialCenter","Component","GoogleApiWrapper","apiKey","width","height","App","className","Map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gRAEMA,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAWVC,eAAiB,WACb,OAAO,EAAKC,MAAMC,OAAOC,KAAI,SAACC,EAAOC,GACnC,OAAO,kBAAC,SAAD,CAAQC,IAAKD,EAAOE,GAAIF,EAAOG,SAAU,CAC/CC,IAAKL,EAAMM,SACXC,IAAKP,EAAMQ,WAEbC,QAAS,kBAAMC,QAAQC,IAAI,0BAhB5B,EAAKd,MAAQ,CACTC,OAAQ,CAAC,CAACO,IAAK,kBAAmBE,KAAM,oBACpC,CAACD,SAAU,UAAWE,WAAY,YAClC,CAACF,SAAU,iBAAkBE,WAAY,kBACzC,CAACF,SAAU,WAAYE,WAAY,aACnC,CAACF,SAAU,WAAYE,WAAY,aACnC,CAACF,SAAU,WAAYE,WAAY,eAR5B,E,sEAwBf,OACI,kBAAC,MAAD,CACFI,OAAQC,KAAKlB,MAAMiB,OACnBE,KAAM,EACNC,MAAOC,EACPC,cAAe,CAAEZ,IAAK,OAAQE,KAAM,UAC7BM,KAAKjB,sB,GA/BHsB,aAqCJC,6BAAiB,CAC5BC,OAAQ,2CADGD,CAEVzB,GAGGsB,EAAY,CAChBK,MAAO,OACPC,OAAQ,Q,MClCGC,MARf,WACE,OACE,yBAAKC,UAAU,OACX,kBAACC,EAAD,QCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.affb3ffa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Map, GoogleApiWrapper, Marker} from \"google-maps-react\"\r\nclass Map2 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            stores: [{lat: 47.49855629475769, lng: -122.14184416996333},\r\n                {latitude: 47.359423, longitude: -122.021071},\r\n                {latitude: 47.2052192687988, longitude: -121.988426208496},\r\n                {latitude: 47.6307081, longitude: -122.1434325},\r\n                {latitude: 47.3084488, longitude: -122.2140121},\r\n                {latitude: 47.5524695, longitude: -122.0425407}]\r\n         }\r\n    }\r\n\r\n    displayMarkers = () => {\r\n        return this.state.stores.map((store, index) => {\r\n          return <Marker key={index} id={index} position={{\r\n           lat: store.latitude,\r\n           lng: store.longitude\r\n         }}\r\n         onClick={() => console.log(\"You clicked me!\")} />\r\n        })\r\n      }\r\n\r\n\r\n    render() { \r\n        return ( \r\n            <Map\r\n          google={this.props.google}\r\n          zoom={8}\r\n          style={mapStyles}\r\n          initialCenter={{ lat: 47.444, lng: -122.176}}>\r\n                {this.displayMarkers()}\r\n            </Map>\r\n         );\r\n    }\r\n}\r\n \r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyCvp3AHDJN5Hi8nDnomuSdGpSW4yaTEh4Y'\r\n  })(Map2);\r\n\r\n\r\n  const mapStyles = {\r\n    width: '100%',\r\n    height: '100%',\r\n  };","import React from 'react';\nimport Map from \"./Components/Map\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Map/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}